Classfile /C:/Users/nguye/Desktop/assignments/CS263_ScalaVsJava/java/PalindromeRecursive/PalindromeRecursive.class
  Last modified Feb 12, 2025; size 748 bytes
  SHA-256 checksum e2c28fad24331792dd860678e7e8c420b6e174952494deea9ce0529e41e203a9
  Compiled from "PalindromeRecursive.java"
final class PalindromeRecursive
  minor version: 0
  major version: 61
  flags: (0x0030) ACC_FINAL, ACC_SUPER
  this_class: #22                         // PalindromeRecursive
  super_class: #2                         // java/lang/Object
  interfaces: 0, fields: 0, methods: 3, attributes: 1
Constant pool:
   #1 = Methodref          #2.#3          // java/lang/Object."<init>":()V
   #2 = Class              #4             // java/lang/Object
   #3 = NameAndType        #5:#6          // "<init>":()V
   #4 = Utf8               java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = Methodref          #8.#9          // java/lang/String.length:()I
   #8 = Class              #10            // java/lang/String
   #9 = NameAndType        #11:#12        // length:()I
  #10 = Utf8               java/lang/String
  #11 = Utf8               length
  #12 = Utf8               ()I
  #13 = Methodref          #8.#14         // java/lang/String.charAt:(I)C
  #14 = NameAndType        #15:#16        // charAt:(I)C
  #15 = Utf8               charAt
  #16 = Utf8               (I)C
  #17 = Methodref          #8.#18         // java/lang/String.substring:(II)Ljava/lang/String;
  #18 = NameAndType        #19:#20        // substring:(II)Ljava/lang/String;
  #19 = Utf8               substring
  #20 = Utf8               (II)Ljava/lang/String;
  #21 = Methodref          #22.#23        // PalindromeRecursive.isPalindrome:(Ljava/lang/String;)Z
  #22 = Class              #24            // PalindromeRecursive
  #23 = NameAndType        #25:#26        // isPalindrome:(Ljava/lang/String;)Z
  #24 = Utf8               PalindromeRecursive
  #25 = Utf8               isPalindrome
  #26 = Utf8               (Ljava/lang/String;)Z
  #27 = Fieldref           #28.#29        // java/lang/System.out:Ljava/io/PrintStream;
  #28 = Class              #30            // java/lang/System
  #29 = NameAndType        #31:#32        // out:Ljava/io/PrintStream;
  #30 = Utf8               java/lang/System
  #31 = Utf8               out
  #32 = Utf8               Ljava/io/PrintStream;
  #33 = String             #34            // hi
  #34 = Utf8               hi
  #35 = Methodref          #36.#37        // java/io/PrintStream.println:(Z)V
  #36 = Class              #38            // java/io/PrintStream
  #37 = NameAndType        #39:#40        // println:(Z)V
  #38 = Utf8               java/io/PrintStream
  #39 = Utf8               println
  #40 = Utf8               (Z)V
  #41 = String             #42            // ababa
  #42 = Utf8               ababa
  #43 = Utf8               Code
  #44 = Utf8               LineNumberTable
  #45 = Utf8               StackMapTable
  #46 = Utf8               main
  #47 = Utf8               ([Ljava/lang/String;)V
  #48 = Utf8               SourceFile
  #49 = Utf8               PalindromeRecursive.java
{
  PalindromeRecursive();
    descriptor: ()V
    flags: (0x0000)
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 1: 0

  static boolean isPalindrome(java.lang.String);
    descriptor: (Ljava/lang/String;)Z
    flags: (0x0008) ACC_STATIC
    Code:
      stack=4, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #7                  // Method java/lang/String.length:()I
         4: iconst_1
         5: if_icmpeq     15
         8: aload_0
         9: invokevirtual #7                  // Method java/lang/String.length:()I
        12: ifne          17
        15: iconst_1
        16: ireturn
        17: aload_0
        18: iconst_0
        19: invokevirtual #13                 // Method java/lang/String.charAt:(I)C
        22: aload_0
        23: aload_0
        24: invokevirtual #7                  // Method java/lang/String.length:()I
        27: iconst_1
        28: isub
        29: invokevirtual #13                 // Method java/lang/String.charAt:(I)C
        32: if_icmpne     50
        35: aload_0
        36: iconst_1
        37: aload_0
        38: invokevirtual #7                  // Method java/lang/String.length:()I
        41: iconst_1
        42: isub
        43: invokevirtual #17                 // Method java/lang/String.substring:(II)Ljava/lang/String;
        46: invokestatic  #21                 // Method isPalindrome:(Ljava/lang/String;)Z
        49: ireturn
        50: iconst_0
        51: ireturn
      LineNumberTable:
        line 4: 0
        line 5: 15
        line 7: 17
        line 8: 35
        line 10: 50
      StackMapTable: number_of_entries = 3
        frame_type = 15 /* same */
        frame_type = 1 /* same */
        frame_type = 32 /* same */

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #27                 // Field java/lang/System.out:Ljava/io/PrintStream;
         3: ldc           #33                 // String hi
         5: invokestatic  #21                 // Method isPalindrome:(Ljava/lang/String;)Z
         8: invokevirtual #35                 // Method java/io/PrintStream.println:(Z)V
        11: getstatic     #27                 // Field java/lang/System.out:Ljava/io/PrintStream;
        14: ldc           #41                 // String ababa
        16: invokestatic  #21                 // Method isPalindrome:(Ljava/lang/String;)Z
        19: invokevirtual #35                 // Method java/io/PrintStream.println:(Z)V
        22: return
      LineNumberTable:
        line 15: 0
        line 16: 11
        line 17: 22
}
SourceFile: "PalindromeRecursive.java"
